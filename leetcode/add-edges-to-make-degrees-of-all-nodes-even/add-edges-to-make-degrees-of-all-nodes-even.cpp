#include "../header.h"

#include <set>

class Solution {
public:
    bool isPossible1(int n, vector<vector<int>>& edges) {
        vector<int> deg(n);
        for (const auto& e: edges) {
            ++deg[e[0] - 1];
            ++deg[e[1] - 1];
        }
        vector<int> odd;
        for (int i = 0; i < n; ++i) {
            if (deg[i] & 1) {
                odd.emplace_back(i);
            }
        }
        if (odd.size() == 0) {
            return true;
        }
        if (odd.size() == 1) {
            return false;
        }
        if (odd.size() == 2) {
            vector<int> e = {odd[0] + 1, odd[1] + 1};
            return set<vector<int>>(edges.begin(), edges.end()).count(e) == 0;
        }
        return false;
    }


    bool isPossible(int n, vector<vector<int>>& edges) {
        for (auto& e: edges) {
            sort(e.begin(), e.end());
        }
        vector<int> deg(n);
        for (const auto& e: edges) {
            ++deg[e[0] - 1];
            ++deg[e[1] - 1];
        }
        vector<int> odd;
        for (int i = 0; i < n; ++i) {
            if (deg[i] & 1) {
                odd.emplace_back(i);
            }
        }
        cerr << odd << endl;
        if (odd.size() == 0) {
            return true;
        }
        if (odd.size() == 1) {
            return false;
        }
        if (odd.size() > 4) {
            return false;
        }
        set<vector<int>> sEdges(edges.begin(), edges.end());

        auto graph = [&](int i, int j) {
            if (i == j) {
                return true;
            }
            if (i > j) {
                swap(i, j);
            }
            return sEdges.count({i, j}) == 1;
        };

        if (odd.size() == 2) {
            int a = odd[0] + 1;
            int b = odd[1] + 1;
            if (!graph(a, b)) {
                return true;
            }
            for (int k = 1; k <= n; ++k) {
                if (!graph(a, k) && !graph(k, b)) {
                    return true;
                }
            }
            return false;
        }
        if (odd.size() == 4) {
            int a = odd[0] + 1;
            int b = odd[1] + 1;
            int c = odd[2] + 1;
            int d = odd[3] + 1;
            if (!graph(a, b) && !graph(c, d)) {
                return true;
            }
            if (!graph(a, c) && !graph(b, d)) {
                return true;
            }
            if (!graph(a, d) && !graph(b, c)) {
                return true;
            }
            return false;
        }
        for (int i = 0; i < odd.size(); ++i) {
            for (int j = i + 1; j < odd.size(); ++j) {
                vector<int> e = {odd[i] + 1, odd[j] + 1};
                if (sEdges.count(e) == 0) {
                    edges.emplace_back(e);
                    if (isPossible1(n, edges)) {
                        return true;
                    }
                    edges.pop_back();
                }
            }
        }
        return false;
    }
};
/*
class Solution {
public:
    bool isPossible(int n, const vector<vector<int>>& edges) {
        vector<int> deg(n);
        for (const auto& e: edges) {
            ++deg[e[0] - 1];
            ++deg[e[1] - 1];
        }
        int odd = 0;
        for (auto d: deg) {
            if (d & 1) {
                ++odd;
            }
        }
        cerr << odd << endl;
        return odd == 0 || odd == 2 || odd == 4;
    }
};
*/

int main() {
    Solution sol;
    Timer t("Subarray timer");
    vector<vector<int>> e = {{1, 2}, {1, 3}, {1, 4}};
    cerr << sol.isPossible(4, e) << endl;
    e = {{2, 19},  {16, 17}, {8, 14},  {2, 16},  {12, 20}, {12, 14}, {16, 18}, {15, 16}, {10, 21}, {3, 5},   {13, 18},
         {17, 20}, {14, 17}, {9, 12},  {5, 15},  {5, 6},   {3, 7},   {2, 21},  {10, 13}, {8, 16},  {7, 18},  {4, 6},
         {9, 1},   {13, 21}, {18, 20}, {7, 14},  {4, 19},  {5, 8},   {3, 11},  {11, 1},  {7, 12},  {4, 7},   {3, 16},
         {13, 17}, {17, 19}, {9, 13},  {7, 19},  {10, 16}, {4, 13},  {4, 5},   {2, 15},  {12, 19}, {11, 16}, {2, 9},
         {11, 17}, {17, 1},  {16, 21}, {4, 10},  {10, 14}, {14, 16}, {4, 1},   {13, 20}, {5, 20},  {4, 14},  {4, 21},
         {10, 20}, {2, 14},  {8, 15},  {4, 8},   {6, 19},  {15, 1},  {19, 1},  {8, 19},  {15, 21}, {3, 12},  {11, 18},
         {9, 17},  {18, 19}, {7, 21},  {3, 21},  {16, 19}, {11, 15}, {5, 1},   {8, 17},  {3, 15},  {8, 1},   {10, 19},
         {3, 8},   {6, 16},  {2, 8},   {5, 18},  {11, 13}, {11, 20}, {14, 21}, {6, 20},  {4, 20},  {12, 13}, {5, 12},
         {10, 11}, {9, 15},  {3, 19},  {9, 20},  {14, 18}, {21, 1},  {13, 19}, {8, 21},  {2, 13},  {3, 10},  {9, 18},
         {19, 21}, {6, 7},   {3, 18},  {2, 18},  {6, 14},  {3, 17},  {5, 21},  {14, 20}, {8, 9},   {16, 1},  {3, 4},
         {13, 1},  {5, 9},   {4, 15},  {17, 21}, {20, 21}, {2, 17},  {13, 14}, {11, 14}, {9, 16},  {10, 18}, {6, 15},
         {6, 12},  {3, 13},  {5, 11},  {6, 1},   {12, 17}, {8, 10},  {5, 10},  {8, 18},  {4, 12},  {10, 1},  {6, 13},
         {4, 18},  {7, 20},  {7, 16},  {2, 6},   {12, 21}, {4, 17},  {15, 18}, {13, 16}, {15, 20}, {7, 10},  {6, 10},
         {2, 20},  {7, 15},  {18, 1},  {12, 1},  {3, 20},  {7, 1},   {14, 15}, {4, 9},   {11, 19}, {7, 9},   {5, 17},
         {18, 21}, {6, 21},  {8, 11},  {6, 17},  {3, 14},  {7, 11},  {5, 7},   {7, 13},  {6, 8},   {6, 9},   {10, 12},
         {5, 16},  {2, 4},   {17, 18}, {9, 11},  {12, 16}, {3, 6},   {12, 18}, {3, 9},   {11, 12}, {14, 19}, {10, 15},
         {5, 13},  {8, 13},  {15, 17}, {2, 10},  {11, 21}, {20, 1},  {6, 18},  {2, 12},  {19, 20}, {6, 11},  {8, 12},
         {2, 3},   {12, 15}, {2, 11},  {9, 10},  {7, 17},  {9, 19},  {13, 15}, {7, 8},   {4, 11},  {2, 5},   {5, 19},
         {16, 20}, {15, 19}, {9, 14},  {14, 1},  {10, 17}, {9, 21},  {2, 7},   {8, 20},  {5, 14},  {4, 16}};
    cerr << sol.isPossible(21, e) << endl;

    e = {{2, 19},  {16, 17}, {8, 14},  {2, 16},  {12, 20}, {12, 14}, {16, 18}, {15, 16}, {10, 21}, {3, 5},   {13, 18},
         {17, 20}, {14, 17}, {9, 12},  {5, 15},  {5, 6},   {3, 7},   {2, 21},  {10, 13}, {8, 16},  {7, 18},  {4, 6},
         {9, 1},   {13, 21}, {18, 20}, {7, 14},  {4, 19},  {5, 8},   {3, 11},  {11, 1},  {7, 12},  {4, 7},   {3, 16},
         {13, 17}, {17, 19}, {9, 13},  {7, 19},  {10, 16}, {4, 13},  {4, 5},   {2, 15},  {12, 19}, {11, 16}, {2, 9},
         {11, 17}, {17, 1},  {16, 21}, {4, 10},  {10, 14}, {14, 16}, {4, 1},   {13, 20}, {5, 20},  {4, 14},  {4, 21},
         {10, 20}, {2, 14},  {8, 15},  {4, 8},   {6, 19},  {15, 1},  {19, 1},  {8, 19},  {15, 21}, {3, 12},  {11, 18},
         {9, 17},  {18, 19}, {7, 21},  {3, 21},  {16, 19}, {11, 15}, {5, 1},   {8, 17},  {3, 15},  {8, 1},   {10, 19},
         {3, 8},   {6, 16},  {2, 8},   {5, 18},  {11, 13}, {11, 20}, {14, 21}, {6, 20},  {4, 20},  {12, 13}, {5, 12},
         {10, 11}, {9, 15},  {3, 19},  {9, 20},  {14, 18}, {21, 1},  {13, 19}, {8, 21},  {2, 13},  {3, 10},  {9, 18},
         {19, 21}, {6, 7},   {3, 18},  {2, 18},  {6, 14},  {3, 17},  {5, 21},  {14, 20}, {8, 9},   {16, 1},  {3, 4},
         {13, 1},  {5, 9},   {4, 15},  {17, 21}, {20, 21}, {2, 17},  {13, 14}, {11, 14}, {9, 16},  {10, 18}, {6, 15},
         {6, 12},  {3, 13},  {5, 11},  {6, 1},   {12, 17}, {8, 10},  {5, 10},  {8, 18},  {4, 12},  {10, 1},  {6, 13},
         {4, 18},  {7, 20},  {7, 16},  {2, 6},   {12, 21}, {4, 17},  {15, 18}, {13, 16}, {15, 20}, {7, 10},  {6, 10},
         {2, 20},  {7, 15},  {18, 1},  {12, 1},  {3, 20},  {7, 1},   {14, 15}, {4, 9},   {11, 19}, {7, 9},   {5, 17},
         {18, 21}, {6, 21},  {8, 11},  {6, 17},  {3, 14},  {7, 11},  {5, 7},   {7, 13},  {6, 8},   {6, 9},   {10, 12},
         {5, 16},  {2, 4},   {17, 18}, {9, 11},  {12, 16}, {3, 6},   {12, 18}, {3, 9},   {11, 12}, {14, 19}, {10, 15},
         {5, 13},  {8, 13},  {15, 17}, {2, 10},  {11, 21}, {20, 1},  {6, 18},  {2, 12},  {19, 20}, {6, 11},  {8, 12},
         {2, 3},   {12, 15}, {2, 11},  {9, 10},  {7, 17},  {9, 19},  {13, 15}, {7, 8},   {4, 11},  {2, 5},   {5, 19},
         {16, 20}, {15, 19}, {9, 14},  {14, 1},  {10, 17}, {9, 21},  {2, 7},   {8, 20},  {5, 14},  {4, 16}};
    cerr << sol.isPossible(21, e) << endl;

    e = {{1, 2}, {2, 3}, {2, 4}, {3, 4}};
    cerr << sol.isPossible(4, e) << endl;

    return 0;
}
